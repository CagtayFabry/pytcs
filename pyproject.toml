[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=77",
  "setuptools-scm[toml]>=8",
]

[project]
name = "pytcs"
description = "Python API for processing TwinCAT Scope data files"
readme = { file = "README.md", content-type = "text/markdown" }
keywords = [
  "file reader",
  "TwinCAT",
  "TwinCAT Scope",
]
license = { file = "LICENSE" }
authors = [
  { name = "Çağtay Fabry", email = "cagtay.fabry@bam.de" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [
  "version",
]
dependencies = [
  "bidict",
  "numpy",
  "pandas>=1.4",
]
optional-dependencies.all = [
  "bottleneck>=1.3",
  "pint>=0.18",
  "xarray>=0.15",
]
optional-dependencies.datatable = [
  "datatable",
]
optional-dependencies.export = [
  # needed to create the test files using create_scope_configs.py
  "dicttoxml",
  "pyyaml",
]
optional-dependencies.test = [
  # needed to run the test suite
  "netcdf4",
  "pyarrow",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
]
urls.bug_tracker = "https://github.com/CagtayFabry/pytcs/issues"
urls.repository = "https://github.com/CagtayFabry/pytcs"

[tool.setuptools.packages]
find = {} # Scanning implicit namespaces is active by default
#exclude = ["tests", "resources"]

[tool.setuptools_scm]
# enable setuptools-scm versioning

[tool.ruff]
target-version = "py39" # designated Python version
line-length = 88
extend-exclude = [
  "./resources/**",
  "./tests/**",
]
lint.extend-select = [ "I" ]
extend-select = [
  "B", # flake8-bugbear
  "C", # flake8-comprehensions
  #"D", # note: all relevant D's will be set by setting pydocstyle.convention=numpy!
  "E",    # pycodestyles
  "F",    # pyflakes
  "W",    # pycodestyle warnings
  "UP",   # pyupgrade
  "T2",   # flake8-print
  "I001", # isort
  "ICN",  # import conventions, e.g. import numpy as np
  #"B950",  # not yet implemented by Ruff.
  "RUF100", # ensure 'noqa' declarations are still valid.
]
ignore = [
  "UP006",
  "UP007", # see ruff GH#4427
]
pydocstyle = { convention = "numpy" }

mccabe = { max-complexity = 15 } # max branches inside a function.

isort.known-first-party = [
  "pytcs",
]
flake8-import-conventions.extend-aliases = { xarray = "xr" }

[tool.pytest.ini_options]
addopts = "--tb=short --color=yes -rsw --cov=pytcs --cov-report=term-missing:skip-covered --doctest-modules"
testpaths = [
  "tests",
]
# norecursedirs = "doc"

[tool.coverage.run]
source = [
  "pytcs",
]

[tool.coverage.report]
omit = [
  "tests/*",
]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # ignore class __repr__-like functions:
  "def __repr__",
  "def __str__",
  "def _ipython_display_",
]
