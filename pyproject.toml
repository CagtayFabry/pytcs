[project]
name = "pytcs"
description = "Python API for processing TwinCAT Scope data files"
readme = {file = "README.md", content-type="text/markdown"}
keywords = [
  "file reader",
  "TwinCAT",
  "TwinCAT Scope",
]
license = {file = "LICENSE", name="BSD License"}
authors = [
    {name="Cagtay Fabry", email="cagtay.fabry@bam.de"},
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dynamic = [
  # see: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#dynamic-metadata
  "version", # version gets derived from git by setuptools_scm.
]
dependencies = [
  "bidict",
  "numpy",
  "pandas>=1.4",
]
[project.optional-dependencies]
all = [
  "bottleneck>=1.3",
  "pint>=0.18",
  "xarray>=0.15",
]
datatable = [
  "datatable",
]
export = [
  # needed to create the test files using create_scope_configs.py
  "dicttoxml",
  "pyyaml",
]
test = [
  # needed to run the test suite
  "pyarrow",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
]
[project.urls]
bug_tracker = "https://github.com/CagtayFabry/pytcs/issues"
repository = "https://github.com/CagtayFabry/pytcs"

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=48",
  "setuptools_scm[toml]>=6.2",
]

[tool.setuptools.packages]
find = {}  # Scanning implicit namespaces is active by default
#exclude = ["tests", "resources"]

[tool.setuptools_scm]
write_to = "pytcs/_version.py"

[tool.black]
line-length = 88
target-version = ['py310']

[tool.isort]
profile = "black"
default_section = "THIRDPARTY"
known_first_party = "pytcs"
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"

[tool.pytest.ini_options]
addopts = "--tb=short --color=yes -rsw --cov=pytcs --cov-report=term-missing:skip-covered --doctest-modules"
testpaths = [
    "tests",
]
# norecursedirs = "doc"

[tool.coverage.run]
source = ["pytcs"]

[tool.coverage.report]
omit = [
    "pytcs/_version.py",
    "tests/*",
]
exclude_lines = [
# Have to re-enable the standard pragma
    "pragma: no cover",

# ignore class __repr__-like functions:
    "def __repr__",
    "def __str__",
    "def _ipython_display_",
]

[tool.ruff]
target-version = "py38"  # designated Python version
line-length = 88
select = [
    "B",  # flake8-bugbear
    "C",  # flake8-comprehensions
    #"D", # note: all relevant D's will be set by setting pydocstyle.convention=numpy!
    "E",  # pycodestyles
    "F",  # pyflakes
    "W",  # pycodestyle warnings
    "UP", # pyupgrade
    "T2",  # flake8-print
    "I001",  # isort
    "ICN", # import conventions, e.g. import numpy as np
    #"B950",  # not yet implemented by Ruff.
    "RUF100", # ensure 'noqa' declarations are still valid.
]
extend-exclude = [
    "__init__.py",
    "./tests/**",
    "./resources/**",
]
pydocstyle = {convention = "numpy"}
pyupgrade = {keep-runtime-typing = true}

mccabe = {max-complexity = 15}  # max branches inside a function.

[tool.ruff.isort]
known-first-party = ["pytcs"]

[tool.ruff.flake8-import-conventions]
extend-aliases = {xarray = "xr"}
